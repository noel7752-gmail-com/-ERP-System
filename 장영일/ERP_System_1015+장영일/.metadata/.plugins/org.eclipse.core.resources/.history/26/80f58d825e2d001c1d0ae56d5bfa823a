package com.daybreak.prj;

import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class ERPController {
    
    @RequestMapping(value = "/daybreak.do")
    public ModelAndView daybreak() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("daybreak.jsp");
        return mav;
    }


    // 통합검색 접속.
    @RequestMapping( value="/searchAll.do" )
    public ModelAndView goSearchAll( 
            
    ){
        //*******************************************
        // [ModelAndView 객체] 생성하기
        // [ModelAndView 객체]에 [호출 JSP 페이지명]을 저장하기
        //*******************************************
        ModelAndView mav = new ModelAndView( );
        mav.setViewName("allSearch.jsp");
        // mav.addObject("boardDTO", boardDTO);

        //*******************************************
        // [ModelAndView 객체] 리턴하기
        //*******************************************
        return mav;
    }

    // 게시판 접속.
    // boardList.do로 바로 접속하게함.  
    // @RequestMapping(value = "/board.do")
    // public ModelAndView goBoard() {
    //     System.out.println("ERPController 쪽, ==> board.do 접속!@#!@#");

    //     ModelAndView mav = new ModelAndView();
    //     mav.setViewName("board.jsp");
    //     return mav;
    // }

    // 통계화면 접속.
    @RequestMapping(value = "/statistics.do")
    public ModelAndView goStatistics() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("statistics.jsp");
        return mav;
    }

    // 재고관리 접속.
    @RequestMapping(value = "/stock_management.do")
    public ModelAndView goSstock_management() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("stock_in_out.jsp");
        return mav;
    }

    // 재고관리 안에서 가전 검색.
    @RequestMapping(value = "/jaego_search.do")
    public ModelAndView goJaego_search() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("jaego_search.jsp");
        return mav;
    }

    
    //새 물품 입력
    @RequestMapping( 
            value="/itemRegProc.do"
            ,method = RequestMethod.POST
            ,produces = "application/json;charset=UTF8"
        )
        @ResponseBody
        public Map<String, String> insertBoard( 
            ERPDTO erpDTo
            ,@RequestParam("img") MultipartFile multi
        ){
            if( multi.isEmpty()==false ){
         
                // 만약에 업로드된 파일의 크기가 1000000 byte(=1000kb) 보다 크면 
                if( multi.getSize()>1000000){
                    Map<String,String> map = new HashMap<String,String>();
                    map.put("boardRegCnt", "0");
                    map.put("msg", "업로드 파일이 10mb 보다 크면 업로드 할 수 없습니다.");
                    return map;
                }

                // 만약에 업로드된 파일의 확장자가 이미지 확장자가 아니면 
                String fileName = multi.getOriginalFilename();

                System.out.println("파일이름 확인하기 =>>> " + fileName);
                
                if( fileName.endsWith(".jpeg")==false && fileName.endsWith(".jpg")==false && fileName.endsWith(".gif")==false && fileName.endsWith(".png")==false ){
                    Map<String,String> map = new HashMap<String,String>();
                    map.put("boardRegCnt", "0");
                    map.put("msg", "이미지 파일 형식이 아닙니다.");
                    return map;
                }
                
            }

            // *********************************************
            // 게시판 등록 성공여부가 저장된 변수 선언. 1이 저장되면 성공했다는 의미
            // 유효성 체크 에러 메시지 저장할 변수 msg 선언
            // *********************************************
            int boardRegCnt = 0;
            String msg = "";
            try{

                /* 인위적 예외발생하기. 
                if( boardDTO.getB_no()>0 ){
                    throw new Exception();
                }
                */ 

                System.out.println( "====================\r" );
                System.out.println( "ERPController 에서 받아오는 값 확인.\r" );
                System.out.println( "getB_no => "  );
                System.out.println( "getSubject => "  );
                System.out.println( "getWriter => "  );
                System.out.println( "getContent => "   );
                System.out.println( "getPwd => "  );
                System.out.println( "====================\r" );

                // *********************************************
                // check_BoardDTO 메소드를 호출하여 [유효성 체크]하고 경고문자 얻기
                // *********************************************
                // check_BoardDTO 메소드를 호출하여 [유효성 체크]하고 [에러 메시지] 문자 얻기
                //msg = check_BoardDTO( boardDTO, bindingResult );  


                // ##############################################################  DB 연동코드 
                // *********************************************
                // 만약 msg 안에 "" 가 저장되어 있으면, 즉, 유효성 체크를 통과했으면  
                // *********************************************
                if( msg.equals("") ){
                    // *********************************************
                    // [BoardServiceImpl 객체]의 insertBoard 메소드 호출로
                    // 게시판 글 입력하고 [게시판 입력 적용행의 개수] 얻기
                    // *********************************************
                    //boardRegCnt = this.boardService.insertBoard(boardDTO, multi); 

                    System.out.println( "boardRegCnt 값 확인 => " + boardRegCnt );  
                }




                System.out.println("BoardController. insertBoard() 메서드 수행완료");

            }catch(Exception ex){
                boardRegCnt = -1;
                msg = "서버에서 문제 발생! 서버 관리자에게 문의 하세요.";
                System.out.println("예외처리 발생, 조치바람!!");
            }    
            // *********************************************
            // HashMap<String, String> 객체 생성하기
            // HashMap<String, String> 객체에 게시판 입력 성공행의 개수 저장하기
            // HashMap<String, String> 객체에 유효성 체크 시 메시지 저장하기
            // HashMap<String, String> 객체리턴하기
            // *********************************************
            Map<String, String> map = new HashMap<String,String>();
            map.put("boardRegCnt", boardRegCnt+"");
            map.put("msg", msg);
            return map;
        }



}
